#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <Adafruit_SDS011.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>

#define WIFI_SSID "YourWiFiSSID"
#define WIFI_PASSWORD "YourWiFiPassword"
#define MQTT_SERVER "mqtt.yourserver.com"
#define MQTT_PORT 1883
#define MQTT_USER "YourMQTTUser"
#define MQTT_PASSWORD "YourMQTTPassword"
#define CLIENT_ID "ESP8266_Client"

#define BME_SCK D5
#define BME_MISO D6
#define BME_MOSI D7
#define BME_CS D8

Adafruit_BME280 bme;
Adafruit_SDS011 sds;

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(9600);
  delay(1000);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi Connected");

  client.setServer(MQTT_SERVER, MQTT_PORT);
  client.setCallback(callback);

  if (!bme.begin()) {
    Serial.println("Failed to initialize BME280 sensor!");
    while (1);
  }

  if (!sds.begin()) {
    Serial.println("Failed to initialize SDS011 sensor!");
    while (1);
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  float temperature = bme.readTemperature();
  float humidity = bme.readHumidity();
  float pressure = bme.readPressure() / 100.0;

  float pm10 = 0.0;
  float pm25 = 0.0;
  if (sds.read(&pm25, &pm10)) {
    Serial.print("PM2.5: ");
    Serial.print(pm25);
    Serial.print(" µg/m3\t");
    Serial.print("PM10: ");
    Serial.print(pm10);
    Serial.println(" µg/m3");
  }

  // Send sensor data to MQTT broker
  String payload = "{";
  payload += "\"temperature\": " + String(temperature);
  payload += ", \"humidity\": " + String(humidity);
  payload += ", \"pressure\": " + String(pressure);
  payload += ", \"pm25\": " + String(pm25);
  payload += ", \"pm10\": " + String(pm10);
  payload += "}";

  char mqttTopic[] = "environment_monitoring/data";
  client.publish(mqttTopic, payload.c_str());

  delay(5000);  // Adjust delay based on data transmission frequency
}

void callback(char* topic, byte* payload, unsigned int length) {
  // Handle incoming MQTT messages if needed
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect(CLIENT_ID, MQTT_USER, MQTT_PASSWORD)) {
      Serial.println("Connected to MQTT broker");
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}
